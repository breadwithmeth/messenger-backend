// src/config/baileys.ts

import makeWASocket, {
  DisconnectReason,
  fetchLatestBaileysVersion,
  WASocket,
  AuthenticationState,
  initAuthCreds,
  AnyMessageContent,
  WAMessage,
  makeCacheableSignalKeyStore,
  SignalDataTypeMap,
  SignalDataSet,
  AuthenticationCreds,
  BufferJSON,
  jidNormalizedUser,
  isJidGroup,
  isJidBroadcast,
  ConnectionState,
  downloadContentFromMessage, // <--- –î–û–ë–ê–í–ò–¢–¨
  MediaType, // <--- –î–û–ë–ê–í–ò–¢–¨
} from '@whiskeysockets/baileys';
import { Boom } from '@hapi/boom';
import { createAuthDBAdapter, prisma, StoredDataType } from './authStorage';
import qrcode from 'qrcode-terminal';
import pino from 'pino';
import { Buffer } from 'buffer';
import * as fs from 'fs/promises'; // –î–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π (—É–¥–∞–ª–µ–Ω–∏–µ –ø–∞–ø–æ–∫)
import path from 'path'; // –î–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—É—Ç—è–º–∏ —Ñ–∞–π–ª–æ–≤

const logger = pino({ level: 'info' });

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è Map –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ WASocket –ø–æ organizationPhoneId
const socks = new Map<number, WASocket>(); 

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
interface CustomSignalStorage {
  get<T extends keyof SignalDataTypeMap>(type: T, ids: string[]): Promise<{ [id: string]: SignalDataTypeMap[T]; }>;
  set(data: SignalDataSet): Promise<void>;
  del(keys: string[]): Promise<void>;
}

// --- –ù–û–í–ê–Ø –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø ---
/**
 * –°–∫–∞—á–∏–≤–∞–µ—Ç –º–µ–¥–∏–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ –ª–æ–∫–∞–ª—å–Ω–æ.
 * @param messageContent –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, imageMessage).
 * @param type –¢–∏–ø –º–µ–¥–∏–∞ ('image', 'video', 'audio', 'document').
 * @param originalFilename –ò–º—è —Ñ–∞–π–ª–∞ (–¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤).
 * @returns –ü—É—Ç—å –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ URL.
 */
async function downloadAndSaveMedia(
  messageContent: any,
  type: MediaType,
  originalFilename?: string
): Promise<string | undefined> {
  try {
    const stream = await downloadContentFromMessage(messageContent, type);
    let buffer = Buffer.from([]);
    for await (const chunk of stream) {
      buffer = Buffer.concat([buffer, chunk]);
    }

    const mediaDir = path.join(__dirname, '..', '..', 'public', 'media');
    await fs.mkdir(mediaDir, { recursive: true });

    const extension = path.extname(originalFilename || '') || `.${messageContent.mimetype?.split('/')[1] || 'bin'}`;
    const uniqueFilename = `${Date.now()}-${Math.round(Math.random() * 1E9)}${extension}`;
    const filePath = path.join(mediaDir, uniqueFilename);

    await fs.writeFile(filePath, buffer);
    logger.info(`‚úÖ –ú–µ–¥–∏–∞—Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${filePath}`);

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π URL-–ø—É—Ç—å
    return `/media/${uniqueFilename}`;
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –∏–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –º–µ–¥–∏–∞:', error);
    return undefined;
  }
}

/**
 * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏ —á–∞—Ç–∞ –≤ –ë–î.
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è chatId –¥–ª—è Message.
 * @param organizationId ID –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
 * @param organizationPhoneId ID —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏, —á–µ—Ä–µ–∑ –∫–æ—Ç–æ—Ä—ã–π –∏–¥–µ—Ç —ç—Ç–æ—Ç —á–∞—Ç
 * @param receivingPhoneJid –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (JID), –∫–æ—Ç–æ—Ä—ã–π —É—á–∞—Å—Ç–≤—É–µ—Ç –≤ —á–∞—Ç–µ
 * @param remoteJid –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä JID —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞
 * @param name –ù–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –∏–º—è —á–∞—Ç–∞
 * @returns ID —á–∞—Ç–∞ –∏–∑ –≤–∞—à–µ–π –ë–î.
 */
export async function ensureChat(
  organizationId: number,
  organizationPhoneId: number,
  receivingPhoneJid: string,
  remoteJid: string,
  name?: string
): Promise<number> {
    try {
        const normalizedRemoteJid = jidNormalizedUser(remoteJid);

        // 1) –í—ã—á–∏—Å–ª—è–µ–º –∫–∞–Ω–æ–Ω–∏—á–µ—Å–∫–∏–π myJid (receivingPhoneJid) —Å —É—á–µ—Ç–æ–º –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        let myJidNormalized: string | undefined;
        const candidates: Array<string | undefined> = [
          receivingPhoneJid,
          // JID —Ç–µ–∫—É—â–µ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ–∫–µ—Ç–∞ –¥–ª—è —ç—Ç–æ–≥–æ organizationPhoneId, –µ—Å–ª–∏ –µ—Å—Ç—å
          socks.get(organizationPhoneId)?.user?.id,
        ];
        // –ü—Ä–æ–±—É–µ–º –¥–æ–±—Ä–∞—Ç—å JID –∏–∑ OrganizationPhone
        try {
          const orgPhone = await prisma.organizationPhone.findUnique({
            where: { id: organizationPhoneId },
            select: { phoneJid: true },
          });
          if (orgPhone?.phoneJid) {
            candidates.push(orgPhone.phoneJid);
          }
        } catch (e) {
          logger.warn(`[ensureChat] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å OrganizationPhone(${organizationPhoneId}) –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ JID: ${String(e)}`);
        }

        for (const c of candidates) {
          if (c && typeof c === 'string' && c.trim()) {
            const norm = jidNormalizedUser(c);
            if (norm) { myJidNormalized = norm; break; }
          }
        }

        if (!myJidNormalized) {
          // –í –∫—Ä–∞–π–Ω–µ–º —Å–ª—É—á–∞–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –¥–∞–∂–µ –µ—Å–ª–∏ –æ–Ω–æ –ø—É—Å—Ç–æ–µ ‚Äî –Ω–æ –ª—É—á—à–µ –∑–∞–ª–æ–≥–∏—Ä—É–µ–º
          logger.warn(`[ensureChat] receivingPhoneJid –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞—Ç—å. –ü–æ—Å—Ç—É–ø–∏–≤—à–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: "${receivingPhoneJid}". –ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –ø—É—Å—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, —á—Ç–æ –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –¥—É–±–ª—è–º.`);
          myJidNormalized = '' as any; // –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ –¥–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É, –Ω–∏–∂–µ –ø–æ–ø—ã—Ç–∞–µ–º—Å—è —Å–ª–∏—Ç—å –µ—ë –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
        }

        // 2) –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —á–∞—Ç –ø–æ —É–Ω–∏–∫–∞–ª—å–Ω–æ–º—É –∫–ª—é—á—É (–µ—Å–ª–∏ JID –∏–∑–≤–µ—Å—Ç–µ–Ω)
        let chat = myJidNormalized
          ? await prisma.chat.findUnique({
              where: {
                organizationId_receivingPhoneJid_remoteJid: {
                  organizationId,
                  receivingPhoneJid: myJidNormalized,
                  remoteJid: normalizedRemoteJid,
                },
              },
            })
          : null;

        // 3) –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –∏ —Ä–∞–Ω–µ–µ –º–æ–≥ –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω —á–∞—Ç —Å –ø—É—Å—Ç—ã–º receivingPhoneJid ‚Äî –ø–æ–ø—Ä–æ–±—É–µ–º –µ–≥–æ –Ω–∞–π—Ç–∏ –∏ –æ–±–Ω–æ–≤–∏—Ç—å
        if (!chat) {
          const emptyChat = await prisma.chat.findFirst({
            where: {
              organizationId,
              remoteJid: normalizedRemoteJid,
              receivingPhoneJid: '',
            },
          });

          if (emptyChat && myJidNormalized) {
            chat = await prisma.chat.update({
              where: { id: emptyChat.id },
              data: {
                receivingPhoneJid: myJidNormalized,
                organizationPhoneId,
                lastMessageAt: new Date(),
              },
            });
            logger.info(`üîÑ –û–±–Ω–æ–≤–ª—ë–Ω —á–∞—Ç #${chat.id}: —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω receivingPhoneJid=${myJidNormalized} –≤–º–µ—Å—Ç–æ –ø—É—Å—Ç–æ–≥–æ (remoteJid=${normalizedRemoteJid}).`);
          }
        }

        // 4) –ï—Å–ª–∏ –ø–æ-–ø—Ä–µ–∂–Ω–µ–º—É –Ω–µ –Ω–∞—à–ª–∏ ‚Äî —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π
        if (!chat) {
          try {
            chat = await prisma.chat.create({
              data: {
                organizationId,
                receivingPhoneJid: myJidNormalized,
                remoteJid: normalizedRemoteJid,
                organizationPhoneId: organizationPhoneId,
                name: name || normalizedRemoteJid.split('@')[0],
                isGroup: isJidGroup(normalizedRemoteJid),
                lastMessageAt: new Date(),
              },
            });
            logger.info(`‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —á–∞—Ç –¥–ª—è JID: ${normalizedRemoteJid} (–í–∞—à –Ω–æ–º–µ—Ä: ${myJidNormalized || '(–ø—É—Å—Ç–æ)'}, –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è: ${organizationId}, Phone ID: ${organizationPhoneId}, ID —á–∞—Ç–∞: ${chat.id})`);
          } catch (e: any) {
            // –í–æ–∑–º–æ–∂–Ω–∞ –≥–æ–Ω–∫–∞ –∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ñ–ª–∏–∫—Ç ‚Äî –ø—Ä–æ–±—É–µ–º –ø–µ—Ä–µ—á–∏—Ç–∞—Ç—å
            if (e?.code === 'P2002') {
              const existing = await prisma.chat.findUnique({
                where: {
                  organizationId_receivingPhoneJid_remoteJid: {
                    organizationId,
                    receivingPhoneJid: myJidNormalized,
                    remoteJid: normalizedRemoteJid,
                  },
                },
              });
              if (existing) {
                chat = existing;
                logger.info(`‚ôªÔ∏è –ù–∞–π–¥–µ–Ω —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —á–∞—Ç –ø–æ—Å–ª–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏: #${chat.id}`);
              } else {
                throw e;
              }
            } else {
              throw e;
            }
          }
        } else {
          // 5) –û–±–Ω–æ–≤–∏–º lastMessageAt –¥–ª—è –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ —á–∞—Ç–∞
          await prisma.chat.update({
            where: { id: chat.id },
            data: { lastMessageAt: new Date(), organizationPhoneId },
          });
        }
        return chat.id;
    } catch (error: any) {
        logger.error(`‚ùå –û—à–∏–±–∫–∞ –≤ ensureChat –¥–ª—è JID ${remoteJid} (–í–∞—à –Ω–æ–º–µ—Ä: ${receivingPhoneJid}, Phone ID: ${organizationPhoneId}):`, error);
        if (error.stack) {
            logger.error('Stack trace:', error.stack);
        }
        if (error.code && error.meta) {
            logger.error(`Prisma Error Code: ${error.code}, Meta:`, JSON.stringify(error.meta, null, 2));
        }
        throw error;
    }
}

/**
 * –•—É–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ Baileys —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç, —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏ —É–ø—Ä–∞–≤–ª—è–µ—Ç —É—á–µ—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏ –∫–ª—é—á–∞–º–∏ —Å–∏–≥–Ω–∞–ª–æ–≤.
 * @param organizationId ID –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏.
 * @param phoneJid JID –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞.
 * @returns –û–±—ä–µ–∫—Ç —Å `state` (–¥–ª—è makeWASocket) –∏ `saveCreds` (–¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ 'creds.update').
 */
export async function useDBAuthState(organizationId: number, phoneJid: string): Promise<{ state: AuthenticationState; saveCreds: () => Promise<void>; }> {
  // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–º–µ—Ä –∏–∑ –ø–æ–ª–Ω–æ–≥–æ JID –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∫–ª—é—á–∞
  const key = phoneJid.split('@')[0].split(':')[0];
  const authDB = createAuthDBAdapter(organizationId, key);

  // 1. –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è creds
  let creds: AuthenticationCreds;
  const storedCredsData = await authDB.get('creds');
  if (storedCredsData && storedCredsData.type === 'base64_json') {
    try {
      const decodedCredsJsonString = Buffer.from(storedCredsData.value, 'base64').toString('utf8');
      const parsedCreds = JSON.parse(decodedCredsJsonString, BufferJSON.reviver) as AuthenticationCreds;
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–ª–Ω–æ—Ç—É –¥–∞–Ω–Ω—ã—Ö
      if (parsedCreds.noiseKey && parsedCreds.signedIdentityKey && parsedCreds.registered !== undefined) {
        creds = parsedCreds;
        logger.info(`‚úÖ –£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (creds) —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ –ë–î –¥–ª—è ${key}.`);
      } else {
        logger.warn(`‚ö†Ô∏è –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ creds –Ω–µ–ø–æ–ª–Ω—ã –¥–ª—è ${key}. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–æ–≤—ã—Ö.`);
        creds = initAuthCreds();
      }
    } catch (e) {
      logger.error(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ creds –∏–∑ –ë–î –¥–ª—è ${key}. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–æ–≤—ã—Ö.`, e);
      creds = initAuthCreds();
    }
  } else {
    creds = initAuthCreds();
    logger.info(`creds –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ë–î –¥–ª—è ${key}, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–æ–≤—ã—Ö.`);
  }

  // 2. –°–æ–∑–¥–∞–Ω–∏–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –∫–ª—é—á–µ–π (SignalStore)
  const keys = {
    async get<T extends keyof SignalDataTypeMap>(type: T, ids: string[]): Promise<{ [id: string]: SignalDataTypeMap[T] }> {
      const data: { [id: string]: SignalDataTypeMap[T] } = {};
      for (const id of ids.filter(Boolean)) {
        const dbKey = `${type}-${id}`;
        const storedData = await authDB.get(dbKey);
        if (storedData) {
          try {
            if (storedData.type === 'base64_json') {
              const decoded = Buffer.from(storedData.value, 'base64').toString('utf8');
              data[id] = JSON.parse(decoded, BufferJSON.reviver);
            } else if (storedData.type === 'buffer') {
               data[id] = Buffer.from(storedData.value, 'base64') as any;
            }
          } catch (e) {
            logger.warn(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏/–ø–∞—Ä—Å–∏–Ω–≥–µ –∫–ª—é—á–∞ ${dbKey}:`, e);
            delete data[id]; // –£–¥–∞–ª—è–µ–º –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
          }
        }
      }
      return data;
    },
    async set(data: SignalDataSet): Promise<void> {
      const tasks: Promise<void>[] = [];
      for (const key in data) {
        const type = key as keyof SignalDataTypeMap;
        const typeData = data[type];
        if (typeData) {
          for (const id in typeData) {
            const value = (typeData as any)[id];
            const dbKey = `${type}-${id}`;
            if (value) {
              let valueToStore: string;
              let dataType: StoredDataType;
              if (value instanceof Buffer) {
                valueToStore = value.toString('base64');
                dataType = 'buffer';
              } else {
                valueToStore = Buffer.from(JSON.stringify(value, BufferJSON.replacer), 'utf8').toString('base64');
                dataType = 'base64_json';
              }
              tasks.push(authDB.set(dbKey, valueToStore, dataType));
            } else {
              tasks.push(authDB.delete(dbKey));
            }
          }
        }
      }
      await Promise.all(tasks);
    }
  };

  return {
    state: {
      creds,
      keys: makeCacheableSignalKeyStore(keys, logger),
    },
    saveCreds: async () => {
      logger.info(`üîê –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö creds –≤ –ë–î –¥–ª—è ${key}.`);
      const base64Creds = Buffer.from(JSON.stringify(creds, BufferJSON.replacer), 'utf8').toString('base64');
      await authDB.set('creds', base64Creds, 'base64_json');
    },
  };
}

/**
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç –∏–ª–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç Baileys —Å–µ—Å—Å–∏—é –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏.
 * @param organizationId ID –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏.
 * @param organizationPhoneId ID —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –≤ –≤–∞—à–µ–π –ë–î.
 * @param phoneJid JID –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ WhatsApp (–Ω–∞–ø—Ä–∏–º–µ—Ä, '77051234567@s.whatsapp.net').
 * @returns –≠–∫–∑–µ–º–ø–ª—è—Ä WASocket.
 */
export async function startBaileys(organizationId: number, organizationPhoneId: number, phoneJid: string): Promise<WASocket> {
  const { state, saveCreds } = await useDBAuthState(organizationId, phoneJid);

  // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –≤–µ—Ä—Å–∏—é WhatsApp Web API
  const { version } = await fetchLatestBaileysVersion();
  logger.info(`–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è WhatsApp Web API –≤–µ—Ä—Å–∏–∏: ${version.join('.')}`);

  // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä Baileys WASocket
  const currentSock = makeWASocket({ 
    version,
    auth: state, // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑ useDBAuthState
    browser: ['Ubuntu', 'Chrome', '22.04.4'], // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±—Ä–∞—É–∑–µ—Ä–µ
    logger: logger, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–∞—à pino logger
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∫—ç—à–∞ –∏–ª–∏ –ë–î (–¥–ª—è Baileys)
    getMessage: async (key) => {
        logger.debug(`–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ getMessage: ${key.id} –æ—Ç ${key.remoteJid}`);
        const msg = await prisma.message.findUnique({
            where: { whatsappMessageId: key.id || '' },
            select: {
                content: true,
                type: true,
                remoteJid: true,
                senderJid: true,
                fromMe: true,
                timestamp: true,
                mediaUrl: true,
                mimeType: true,
                filename: true,
                size: true
            }
        });
        if (msg) {
            if (msg.type === 'text') {
                return { conversation: msg.content };
            } else if (msg.type === 'image' && msg.mediaUrl) {
                return { imageMessage: { caption: msg.content || '', mimetype: msg.mimeType || 'image/jpeg' } };
            }
            return { conversation: msg.content || '–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –ë–î, –Ω–æ —Ç–∏–ø –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∞–Ω –¥–ª—è getMessage.' };
        }
        return { conversation: '–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –∫—ç—à–µ –∏–ª–∏ –ë–î' };
    }
  });

  // !!! –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–π —Å–æ–∫–µ—Ç –≤ socks Map !!!
  socks.set(organizationPhoneId, currentSock);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
  currentSock.ev.on('connection.update', async (update: Partial<ConnectionState>) => { 
    const { connection, lastDisconnect, qr } = update;

    logger.info(`[ConnectionUpdate] Status for ${phoneJid}: connection=${connection}, QR_present=${!!qr}`);
    if (lastDisconnect) {
      logger.info(`[ConnectionUpdate] lastDisconnect for ${phoneJid}: reason=${(lastDisconnect.error as Boom)?.output?.statusCode || lastDisconnect.error?.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}`);
    }

    // –ï—Å–ª–∏ –ø–æ–ª—É—á–µ–Ω QR-–∫–æ–¥
    if (qr) {
      logger.info(`[ConnectionUpdate] QR code received for ${phoneJid}. Length: ${qr.length}`);
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º QR-–∫–æ–¥ –≤ –ë–î –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
      await prisma.organizationPhone.update({
        where: { id: organizationPhoneId },
        data: { qrCode: qr, status: 'pending' },
      });

      // –í—ã–≤–æ–¥–∏–º QR-–∫–æ–¥ –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª
      console.log(`\n======================================================`);
      console.log(`       QR-–ö–û–î –î–õ–Ø –ù–û–ú–ï–†–ê: ${phoneJid}           `);
      console.log(`======================================================`);
      qrcode.generate(qr, { small: true });
      console.log(`======================================================`);
      console.log(`  –û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥ —Å –ø–æ–º–æ—â—å—é WhatsApp –Ω–∞ –≤–∞—à–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω–µ.`);
      console.log(`  (WhatsApp -> –ù–∞—Å—Ç—Ä–æ–π–∫–∏ -> –°–≤—è–∑–∞–Ω–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ -> –ü—Ä–∏–≤—è–∑–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞)`);
      console.log(`======================================================\n`);
    } else {
      logger.info(`[ConnectionUpdate] No QR code in this update for ${phoneJid}.`);
    }

    // –ï—Å–ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ
    if (connection === 'close') {
      const shouldReconnect =
        (lastDisconnect?.error as Boom)?.output?.statusCode !== DisconnectReason.loggedOut;
      logger.info(`[Connection] –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ –¥–ª—è ${phoneJid}. –ü—Ä–∏—á–∏–Ω–∞: ${lastDisconnect?.error}. –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: ${shouldReconnect}`);
      
      // –£–¥–∞–ª—è–µ–º —Å–æ–∫–µ—Ç –∏–∑ Map –ø–µ—Ä–µ–¥ –ø–æ–ø—ã—Ç–∫–æ–π –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º
      socks.delete(organizationPhoneId);

      if (shouldReconnect) {
        // –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–æ–ø—ã—Ç–∫–æ–π –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        await new Promise(resolve => setTimeout(resolve, 3000));
        logger.info(`[Connection] –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è ${phoneJid}...`);
        // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –≤—ã–∑—ã–≤–∞–µ–º startBaileys –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏
        startBaileys(organizationId, organizationPhoneId, phoneJid);
      } else {
          logger.error(`[Connection] –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è ${phoneJid} –Ω–µ –±—É–¥–µ—Ç –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–æ (Logged out). –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–∏...`);
          // --- –î–û–ë–ê–í–õ–ï–ù–û: –î–µ—Ç–∞–ª—å–Ω—ã–π –ª–æ–≥ –æ—à–∏–±–∫–∏ ---
          logger.error(`[Connection] –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏ 'lastDisconnect' –¥–ª—è ${phoneJid}:`, lastDisconnect);
          
          // --- –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–º–µ—Ä –¥–ª—è –∫–ª—é—á–∞, –∫–∞–∫ –≤ useDBAuthState ---
          const key = phoneJid.split('@')[0].split(':')[0];

          // –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –∏–∑ –ë–î –ø–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É –∫–ª—é—á—É
          await prisma.baileysAuth.deleteMany({
            where: {
              organizationId: organizationId,
              phoneJid: key, // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–º–µ—Ä
            }
          });
          logger.info(`‚úÖ –î–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –¥–ª—è ${key} —É–¥–∞–ª–µ–Ω—ã –∏–∑ –ë–î.`);

          // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ë–î –Ω–∞ 'logged_out' –∏ –æ—á–∏—â–∞–µ–º QR-–∫–æ–¥
          await prisma.organizationPhone.update({
              where: { id: organizationPhoneId },
              data: { status: 'logged_out', lastConnectedAt: new Date(), qrCode: null }, 
          });
      }
    } else if (connection === 'open') {
      // –ï—Å–ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç–æ
      logger.info(`‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ WhatsApp –¥–ª—è ${phoneJid} (–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è: ${organizationId}, Phone ID: ${organizationPhoneId})`);
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ë–î –Ω–∞ 'connected', —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–π JID –∏ –æ—á–∏—â–∞–µ–º QR-–∫–æ–¥
      await prisma.organizationPhone.update({
          where: { id: organizationPhoneId },
          data: { status: 'connected', phoneJid: currentSock?.user?.id || phoneJid, lastConnectedAt: new Date(), qrCode: null }, 
      });
    }
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  currentSock.ev.on('creds.update', saveCreds); // –ò—Å–ø–æ–ª—å–∑—É–µ–º saveCreds –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è

  // –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å v7: –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π LID –º–∞–ø–ø–∏–Ω–≥–∞ (–≤ 6.7.x —Å–æ–±—ã—Ç–∏–µ –Ω–µ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è)
  try {
    (currentSock.ev as any).on?.('lid-mapping.update', (mapping: any) => {
      logger.info(`[LID] lid-mapping.update: ${JSON.stringify(mapping)}`);
      // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∑–∞–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å currentSock.signalRepository?.lidMapping?.storeLIDPNMappings(mapping)
      // –Ω–æ API –º–æ–∂–µ—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è –º–µ–∂–¥—É –≤–µ—Ä—Å–∏—è–º–∏ ‚Äî –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–π –ª–æ–≥
    });
  } catch (e) {
    logger.debug('LID mapping event handler not supported in this version');
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
  currentSock.ev.on('messages.upsert', async ({ messages, type }) => { 
    if (type === 'notify') {
      for (const msg of messages) {
        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏–ª–∏ –µ—Å–ª–∏ —ç—Ç–æ –Ω–∞—à–µ –∏—Å—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–µ –∏–º–µ—é—â–µ–µ –≤–∏–¥–∏–º–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        if (!msg.message) {
            logger.info(`[Message Upsert] –ü—Ä–æ–ø—É—â–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (ID: ${msg.key.id})`);
            continue;
        }
        if (msg.key.fromMe && !msg.message.conversation && !msg.message.extendedTextMessage && !msg.message.imageMessage && !msg.message.videoMessage && !msg.message.documentMessage && !msg.message.audioMessage && !msg.message.stickerMessage) {
            logger.info(`[Message Upsert] –ü—Ä–æ–ø—É—â–µ–Ω–æ –∏—Å—Ö–æ–¥—è—â–µ–µ —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (ID: ${msg.key.id})`);
            continue;
        }

  // v7: –ø–æ–¥–¥–µ—Ä–∂–∫–∞ LID alt-–∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤. –í 6.7.x —ç—Ç–∏—Ö –ø–æ–ª–µ–π –Ω–µ—Ç, –ø–æ—ç—Ç–æ–º—É –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback.
  const rawRemote: string = (msg.key as any).remoteJidAlt ?? msg.key.remoteJid ?? '';
  const remoteJid = jidNormalizedUser(rawRemote);
        if (!remoteJid) {
            logger.warn('üö´ –°–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ remoteJid, –ø—Ä–æ–ø—É—â–µ–Ω–æ.');
            continue;
        }

        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —à–∏—Ä–æ–∫–æ–≤–µ—â–∞—Ç–µ–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Å—Ç–∞—Ç—É—Å—ã
        if (isJidBroadcast(remoteJid) || remoteJid === 'status@broadcast') {
            logger.info(`–ü—Ä–æ–ø—É—Å–∫–∞–µ–º —à–∏—Ä–æ–∫–æ–≤–µ—â–∞—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ —Å—Ç–∞—Ç—É—Å –æ—Ç ${remoteJid}.`);
            continue;
        }

        try {
            const rawParticipant: string = (msg.key as any).participantAlt ?? msg.key.participant ?? remoteJid;
            const senderJid = jidNormalizedUser(msg.key.fromMe ? (currentSock?.user?.id || phoneJid) : rawParticipant);

            let content: string | undefined;
            let messageType: string = "unknown";
            let mediaUrl: string | undefined;
            let filename: string | undefined;
            let mimeType: string | undefined;
            let size: number | undefined;
            // --- –ù–û–í–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï –î–õ–Ø –û–¢–í–ï–¢–û–í ---
            let quotedMessageId: string | undefined;
            let quotedContent: string | undefined;

            const messageContent = msg.message;
            console.log(messageContent.extendedTextMessage?.contextInfo?.quotedMessage)
            // –†–∞–∑–±–æ—Ä —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
            if (messageContent?.conversation) {
                content = messageContent.conversation;
                messageType = "text";
                logger.info(`  [${messageType}] –°–æ–¥–µ—Ä–∂–∏–º–æ–µ: "${content}"`);
            } else if (messageContent?.extendedTextMessage) {
                content = messageContent.extendedTextMessage.text || undefined;
                messageType = "text";
                
                // --- –ù–ê–ß–ê–õ–û: –û–ë–†–ê–ë–û–¢–ö–ê –û–¢–í–ï–¢–ê ---
                const contextInfo = messageContent.extendedTextMessage.contextInfo;
                if (contextInfo?.quotedMessage) {
                    quotedMessageId = contextInfo.stanzaId ?? undefined;
                    const qm = contextInfo.quotedMessage;
                    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ —Ä–∞–∑–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø–æ–ª–µ–π —Ü–∏—Ç–∏—Ä—É–µ–º–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                    quotedContent = qm.conversation || 
                                    qm.extendedTextMessage?.text ||
                                    qm.imageMessage?.caption ||
                                    qm.videoMessage?.caption ||
                                    qm.documentMessage?.fileName ||
                                    '[–ú–µ–¥–∏–∞—Ñ–∞–π–ª]'; // –ü–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä –¥–ª—è –º–µ–¥–∏–∞ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞
                    logger.info(`  [reply] –û—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ ID: ${quotedMessageId}`);
                }
                // --- –ö–û–ù–ï–¶: –û–ë–†–ê–ë–û–¢–ö–ê –û–¢–í–ï–¢–ê ---

                logger.info(`  [${messageType}] –°–æ–¥–µ—Ä–∂–∏–º–æ–µ: "${content}"`);
            } else if (messageContent?.imageMessage) {
                messageType = "image";
                content = messageContent.imageMessage.caption || undefined;
                mimeType = messageContent.imageMessage.mimetype || undefined;
                size = Number(messageContent.imageMessage.fileLength) || undefined;
                // --- –°–ö–ê–ß–ò–í–ê–ù–ò–ï –ò –°–û–•–†–ê–ù–ï–ù–ò–ï –§–û–¢–û ---
                mediaUrl = await downloadAndSaveMedia(messageContent.imageMessage, 'image');
                logger.info(`  [${messageType}] –°–æ–¥–µ—Ä–∂–∏–º–æ–µ: "${content || '–±–µ–∑ –ø–æ–¥–ø–∏—Å–∏'}". MIME: ${mimeType}. –†–∞–∑–º–µ—Ä: ${size}.`);
            } else if (messageContent?.videoMessage) {
                messageType = "video";
                content = messageContent.videoMessage.caption || undefined;
                mimeType = messageContent.videoMessage.mimetype || undefined;
                size = Number(messageContent.videoMessage.fileLength) || undefined;
                logger.info(`  [${messageType}] –°–æ–¥–µ—Ä–∂–∏–º–æ–µ: "${content || '–±–µ–∑ –ø–æ–¥–ø–∏—Å–∏'}". MIME: ${mimeType}. –†–∞–∑–º–µ—Ä: ${size}.`);
            } else if (messageContent?.documentMessage) {
                messageType = "document";
                filename = messageContent.documentMessage.fileName || undefined;
                mimeType = messageContent.documentMessage.mimetype || undefined;
                size = Number(messageContent.documentMessage.fileLength) || undefined;
                // --- –°–ö–ê–ß–ò–í–ê–ù–ò–ï –ò –°–û–•–†–ê–ù–ï–ù–ò–ï –î–û–ö–£–ú–ï–ù–¢–ê ---
                mediaUrl = await downloadAndSaveMedia(messageContent.documentMessage, 'document', filename);
                logger.info(`  [${messageType}] –î–æ–∫—É–º–µ–Ω—Ç: "${filename || '–±–µ–∑ –∏–º–µ–Ω–∏'}". MIME: ${mimeType}. –†–∞–∑–º–µ—Ä: ${size}.`);
            } else if (messageContent?.audioMessage) {
                messageType = "audio";
                mimeType = messageContent.audioMessage.mimetype || undefined;
                size = Number(messageContent.audioMessage.fileLength) || undefined;
                // --- –°–ö–ê–ß–ò–í–ê–ù–ò–ï –ò –°–û–•–†–ê–ù–ï–ù–ò–ï –ê–£–î–ò–û ---
                mediaUrl = await downloadAndSaveMedia(messageContent.audioMessage, 'audio');
                logger.info(`  [${messageType}] –ê—É–¥–∏–æ. MIME: ${mimeType}. –†–∞–∑–º–µ—Ä: ${size}.`);
            } else if (messageContent?.stickerMessage) {
                messageType = "sticker";
                mimeType = messageContent.stickerMessage.mimetype || undefined;
                size = Number(messageContent.stickerMessage.fileLength) || undefined;
                logger.info(`  [${messageType}] –°—Ç–∏–∫–µ—Ä. MIME: ${mimeType}. –†–∞–∑–º–µ—Ä: ${size}.`);
            } else if (messageContent?.locationMessage) {
                messageType = "location";
                content = `Latitude: ${messageContent.locationMessage.degreesLatitude}, Longitude: ${messageContent.locationMessage.degreesLongitude}`;
                logger.info(`  [${messageType}] –õ–æ–∫–∞—Ü–∏—è: ${content}`);
            } else if (messageContent?.liveLocationMessage) {
                messageType = "live_location";
                content = `Live Location: Capt=${messageContent.liveLocationMessage.caption || 'N/A'}, Seq=${messageContent.liveLocationMessage.sequenceNumber}`;
                logger.info(`  [${messageType}] ${content}`);
            } else if (messageContent?.contactMessage) {
                messageType = "contact";
                content = `–ö–æ–Ω—Ç–∞–∫—Ç: ${messageContent.contactMessage.displayName || messageContent.contactMessage.vcard}`;
                logger.info(`  [${messageType}] –ö–æ–Ω—Ç–∞–∫—Ç: ${content}`);
            } else if (messageContent?.contactsArrayMessage) {
                messageType = "contacts_array";
                content = `–ö–æ–Ω—Ç–∞–∫—Ç—ã: ${messageContent.contactsArrayMessage.contacts?.map(c => c.displayName || c.vcard).join(', ') || '–ø—É—Å—Ç–æ'}`;
                logger.info(`  [${messageType}] –ö–æ–Ω—Ç–∞–∫—Ç—ã: ${content}`);
            } else if (messageContent?.reactionMessage) {
                messageType = "reaction";
                content = `–†–µ–∞–∫—Ü–∏—è "${messageContent.reactionMessage.text}" –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ ${messageContent.reactionMessage.key?.id}`;
                logger.info(`  [${messageType}] ${content}`);
            } else if (messageContent?.protocolMessage) {
                messageType = "protocol";
                content = `–°–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (—Ç–∏–ø: ${messageContent.protocolMessage.type})`;
                logger.info(`  [${messageType}] ${content}`);
            } else if (messageContent?.call) {
                messageType = "call";
                const callId = messageContent.call.callKey ? Buffer.from(messageContent.call.callKey).toString('hex') : 'unknown';
                content = `–ó–≤–æ–Ω–æ–∫ –æ—Ç ${senderJid} (ID: ${callId})`;
                logger.info(`  [${messageType}] ${content}`);
            }

            if (messageType === "unknown" && Object.keys(messageContent || {}).length > 0) {
                messageType = Object.keys(messageContent || {})[0];
                logger.warn(`  [${messageType}] –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –∏–ª–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è. JID: ${remoteJid}`);
            } else if (messageType === "unknown") {
                 logger.warn(`  [–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π] –°–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –æ–ø–æ–∑–Ω–∞–≤–∞–µ–º–æ–≥–æ —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞. JID: ${remoteJid}`);
                 continue; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø—É—Å—Ç—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            }

            // --- –ò–°–ü–†–ê–í–õ–ï–ù–û: –ë–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ timestamp ---
            let timestampInSeconds: number;
            const ts = msg.messageTimestamp;
            if (typeof ts === 'number') {
              timestampInSeconds = ts;
            } else if (ts && typeof ts === 'object' && typeof (ts as any).toNumber === 'function') {
              // –≠—Ç–æ –æ–±—ä–µ–∫—Ç Long, –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –µ–≥–æ –≤ —á–∏—Å–ª–æ
              timestampInSeconds = (ts as any).toNumber();
            } else {
              // –ó–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç, –µ—Å–ª–∏ timestamp –Ω–µ –ø—Ä–∏—à–µ–ª –∏–ª–∏ –≤ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
              timestampInSeconds = Math.floor(Date.now() / 1000);
            }
            const timestampDate = new Date(timestampInSeconds * 1000);


            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ë–î
            const myJid = jidNormalizedUser(currentSock?.user?.id || phoneJid) || '';
            const chatId = await ensureChat(organizationId, organizationPhoneId, myJid, remoteJid);
            
            const savedMessage = await prisma.message.create({
                data: {
                    chatId: chatId,
                    organizationPhoneId: organizationPhoneId,
                    receivingPhoneJid: myJid,
                    remoteJid: remoteJid,
                    whatsappMessageId: msg.key.id || `_temp_${Date.now()}_${Math.random()}`,
                    senderJid: senderJid,
                    fromMe: msg.key.fromMe || false,
                    content: content || '',
                    type: messageType,
                    mediaUrl: mediaUrl,
                    filename: filename,
                    mimeType: mimeType,
                    size: size,
                    timestamp: timestampDate,
                    status: 'received',
                    organizationId: organizationId,
                    // –í—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–µ –ø—Ä–æ—á–∏—Ç–∞–Ω—ã –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º
                    isReadByOperator: msg.key.fromMe || false, // –ò—Å—Ö–æ–¥—è—â–∏–µ —Å—á–∏—Ç–∞–µ–º –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–º–∏
                    // --- –°–û–•–†–ê–ù–ï–ù–ò–ï –î–ê–ù–ù–´–• –û–¢–í–ï–¢–û–í ---
                    quotedMessageId: quotedMessageId,
                    quotedContent: quotedContent,
                },
            });

            // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            if (!msg.key.fromMe) {
                await prisma.chat.update({
                    where: { id: chatId },
                    data: {
                        unreadCount: {
                            increment: 1,
                        },
                        lastMessageAt: timestampDate,
                    },
                });
                logger.info(`üì¨ –£–≤–µ–ª–∏—á–µ–Ω —Å—á–µ—Ç—á–∏–∫ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö –¥–ª—è —á–∞—Ç–∞ ${chatId}`);
            } else {
                // –î–ª—è –∏—Å—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Ç–æ–ª—å–∫–æ –æ–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                await prisma.chat.update({
                    where: { id: chatId },
                    data: {
                        lastMessageAt: timestampDate,
                    },
                });
            }

            logger.info(`üíæ –°–æ–æ–±—â–µ–Ω–∏–µ (—Ç–∏–ø: ${messageType}, ID: ${savedMessage.id}) —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î (JID —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞: ${remoteJid}, –í–∞—à –Ω–æ–º–µ—Ä: ${phoneJid}, chatId: ${savedMessage.chatId}).`);

        } catch (error:any) {
            logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ë–î –¥–ª—è JID ${remoteJid} (–í–∞—à –Ω–æ–º–µ—Ä: ${phoneJid}):`);
            if (error instanceof Error) {
                logger.error('–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ:', error.message);
                if (error.stack) {
                    logger.error('Stack trace:', error.stack);
                }
                if ('code' in error && 'meta' in error && typeof error.code === 'string') {
                    logger.error(`Prisma Error Code: ${error.code}, Meta:`, JSON.stringify(error.meta, null, 2));
                }
            } else {
                logger.error('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
            }
        }
      }
    }
  });

  return currentSock; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–π —Å–æ–∫–µ—Ç
}

/**
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä WASocket –ø–æ ID —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏.
 * @param organizationPhoneId ID —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏.
 * @returns –≠–∫–∑–µ–º–ø–ª—è—Ä WASocket –∏–ª–∏ null, –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.
 */
export function getBaileysSock(organizationPhoneId: number): WASocket | null {
  logger.info(`[getBaileysSock] –ó–∞–ø—Ä–æ—à–µ–Ω organizationPhoneId: ${organizationPhoneId}`);
  logger.info(`[getBaileysSock] –ö–ª—é—á–∏ –≤ socks Map: [${Array.from(socks.keys()).join(', ')}]`);
  const sock = socks.get(organizationPhoneId);
  if (!sock) {
    logger.warn(`[getBaileysSock] –°–æ–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è organizationPhoneId: ${organizationPhoneId}`);
  } else {
    logger.info(`[getBaileysSock] –°–æ–∫–µ—Ç –Ω–∞–π–¥–µ–Ω –¥–ª—è organizationPhoneId: ${organizationPhoneId}. JID —Å–æ–∫–µ—Ç–∞: ${sock.user?.id || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}`);
  }
  return sock || null;
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Baileys —Å–æ–∫–µ—Ç.
 * @param sock –≠–∫–∑–µ–º–ø–ª—è—Ä WASocket.
 * @param jid JID –ø–æ–ª—É—á–∞—Ç–µ–ª—è.
 * @param content –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏—è.
 */
export async function sendMessage(
  sock: WASocket,
  jid: string,
  content: AnyMessageContent,
  organizationId: number, // –î–æ–±–∞–≤–ª—è–µ–º organizationId
  organizationPhoneId: number, // –î–æ–±–∞–≤–ª—è–µ–º organizationPhoneId
  senderJid: string, // –î–æ–±–∞–≤–ª—è–µ–º senderJid (–≤–∞—à –Ω–æ–º–µ—Ä)
  userId?: number, // <-- –î–û–ë–ê–í–õ–ï–ù userId (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
  mediaInfo?: { // <-- –î–û–ë–ê–í–õ–ï–ù–ê –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–µ–¥–∏–∞—Ñ–∞–π–ª–µ
    mediaUrl?: string;
    filename?: string;
    size?: number;
  }
) {
  if (!sock || !sock.user) {
    throw new Error('Baileys socket is not connected or user is not defined.');
  }

  try {
    const sentMessage = await sock.sendMessage(jid, content);

    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ mediaInfo –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    logger.info(`[sendMessage] –ü–æ–ª—É—á–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–µ–¥–∏–∞—Ñ–∞–π–ª–µ:`, {
      mediaInfo,
      hasMediaUrl: !!mediaInfo?.mediaUrl,
      hasFilename: !!mediaInfo?.filename,
      hasSize: !!mediaInfo?.size
    });

    // --- –ù–ê–ß–ê–õ–û –ù–û–í–û–ì–û –ö–û–î–ê –î–õ–Ø –°–û–•–†–ê–ù–ï–ù–ò–Ø ---
    if (sentMessage) {
      const remoteJid = jidNormalizedUser(jid); // JID –ø–æ–ª—É—á–∞—Ç–µ–ª—è
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏—è
      let messageType = 'text';
      let messageContent = '';
      let mediaUrl: string | undefined = mediaInfo?.mediaUrl; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
      let filename: string | undefined = mediaInfo?.filename; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
      let mimeType: string | undefined;
      let size: number | undefined = mediaInfo?.size; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é

      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞
      if ((content as any).text) {
        messageType = 'text';
        messageContent = (content as any).text;
      } else if ((content as any).image) {
        messageType = 'image';
        messageContent = (content as any).caption || '';
        mimeType = 'image/jpeg'; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
      } else if ((content as any).video) {
        messageType = 'video';
        messageContent = (content as any).caption || '';
        mimeType = 'video/mp4'; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
      } else if ((content as any).document) {
        messageType = 'document';
        filename = filename || (content as any).fileName || 'document'; // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–º—É filename
        messageContent = (content as any).caption || '';
        mimeType = 'application/octet-stream'; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
      } else if ((content as any).audio) {
        messageType = 'audio';
        mimeType = (content as any).mimetype || 'audio/mp4';
      } else if ((content as any).sticker) {
        messageType = 'sticker';
        mimeType = 'image/webp';
      } else {
        // –î–ª—è –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
        messageContent = JSON.stringify(content);
      }

  // –ü–æ–ª—É—á–∞–µ–º chatId –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
  const myJid = jidNormalizedUser(sock.user?.id || senderJid) || '';
  const chatId = await ensureChat(organizationId, organizationPhoneId, myJid, remoteJid);

      // --- –ù–ê–ß–ê–õ–û: –£–õ–£–ß–®–ï–ù–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –ò –õ–û–ì–ò–†–û–í–ê–ù–ò–ï userId ---
      logger.info(`[sendMessage] –ü—Ä–æ–≤–µ—Ä–∫–∞ userId –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º. –ü–æ–ª—É—á–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: ${userId}, —Ç–∏–ø: ${typeof userId}`);

      const messageData: any = {
        chatId: chatId,
        organizationPhoneId: organizationPhoneId,
  receivingPhoneJid: myJid,
        remoteJid: remoteJid,
  whatsappMessageId: sentMessage.key.id || `_out_${Date.now()}_${Math.random()}`,
  senderJid: myJid,
        fromMe: true,
        content: messageContent,
        type: messageType,
        mediaUrl: mediaUrl,
        filename: filename,
        mimeType: mimeType,
        size: size,
        timestamp: new Date(),
        status: 'sent',
        organizationId: organizationId,
      };

      // –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º senderUserId —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ userId —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º
      if (typeof userId === 'number' && !isNaN(userId)) {
        messageData.senderUserId = userId;
      } else {
        logger.warn(`[sendMessage] userId –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º (–∑–Ω–∞—á–µ–Ω–∏–µ: ${userId}). senderUserId –Ω–µ –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.`);
      }
      // --- –ö–û–ù–ï–¶: –£–õ–£–ß–®–ï–ù–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –ò –õ–û–ì–ò–†–û–í–ê–ù–ò–ï userId ---

      // --- –û–¢–õ–ê–î–û–ß–ù–´–ô –õ–û–ì ---
      logger.info({
          msg: '[sendMessage] Data to be saved to DB',
          data: messageData,
          receivedUserId: userId,
          isUserIdNumber: typeof userId === 'number',
          mediaInfo: {
            originalMediaUrl: mediaInfo?.mediaUrl,
            originalFilename: mediaInfo?.filename,
            originalSize: mediaInfo?.size,
            finalMediaUrl: messageData.mediaUrl,
            finalFilename: messageData.filename,
            finalSize: messageData.size
          }
      }, '–ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.');

      await prisma.message.create({
        data: messageData,
      });
      logger.info(`‚úÖ –ò—Å—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ "${messageContent}" (ID: ${sentMessage.key.id}) —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î. Chat ID: ${chatId}, Type: ${messageType}`);
    } else {
      logger.warn(`‚ö†Ô∏è –ò—Å—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ ${jid} –Ω–µ –±—ã–ª–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: sentMessage is undefined.`);
    }
    // --- –ö–û–ù–ï–¶ –ù–û–í–û–ì–û –ö–û–î–ê –î–õ–Ø –°–û–•–†–ê–ù–ï–ù–ò–Ø ---

    return sentMessage;
  } catch (error: any) {
    logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏/–∏–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏—Å—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ ${jid}:`, error);
    throw error; // –ü–µ—Ä–µ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–∞–ª—å—à–µ
  }
}


// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, Ctrl+C)
process.on('SIGINT', async () => {
  logger.info('–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGINT. –ó–∞–∫—Ä—ã—Ç–∏–µ Baileys...');
  // –ò—Ç–µ—Ä–∏—Ä—É–µ–º –ø–æ –≤—Å–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º —Å–æ–∫–µ—Ç–∞–º –∏ –∑–∞–∫—Ä—ã–≤–∞–µ–º –∏—Ö
  for (const sockToClose of socks.values()) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Å–æ–∫–µ—Ç –∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –µ–≥–æ WebSocket –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ OPEN (—á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ 1)
    if (sockToClose && (sockToClose.ws as any).readyState === 1) { 
      try {
        await sockToClose.end(new Error('–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É: SIGINT –ø–æ–ª—É—á–µ–Ω.'));
        logger.info(`Baileys socket –¥–ª—è JID ${sockToClose.user?.id || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'} –∑–∞–∫—Ä—ã—Ç.`);
      } catch (e) {
        logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–æ–∫–µ—Ç–∞: ${e}`);
      }
    } else if (sockToClose) {
        logger.info(`Baileys socket –¥–ª—è JID ${sockToClose.user?.id || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'} –Ω–µ –±—ã–ª –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ OPEN (readyState: ${(sockToClose.ws as any)?.readyState}).`);
    }
  }
  socks.clear(); // –û—á–∏—â–∞–µ–º Map –ø–æ—Å–ª–µ –ø–æ–ø—ã—Ç–∫–∏ –∑–∞–∫—Ä—ã—Ç–∏—è –≤—Å–µ—Ö —Å–æ–∫–µ—Ç–æ–≤
  logger.info('–í—Å–µ Baileys —Å–æ–∫–µ—Ç—ã –∑–∞–∫—Ä—ã—Ç—ã.');

  await prisma.$disconnect(); // –û—Ç–∫–ª—é—á–∞–µ–º—Å—è –æ—Ç Prisma Client
  logger.info('Prisma Client –æ—Ç–∫–ª—é—á–µ–Ω.');
  process.exit(0); // –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
});