// src/controllers/messageController.ts

import { Request, Response } from 'express';
import { getBaileysSock } from '../config/baileys'; 
import { AnyMessageContent } from '@whiskeysockets/baileys'; 
import pino from 'pino';
import { prisma } from '../config/authStorage';
// import { ensureChat } from '../config/baileys'; // –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ ensureChat —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è –∏–∑ baileys.ts

const logger = pino({ level: 'info' });

// ID –≤–∞—à–µ–≥–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –±–æ—Ç–∞/—Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
// –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –µ—Å–ª–∏ –≤–∞—à –±–æ—Ç —Å–∞–º –ø–æ —Å–µ–±–µ —Å—á–∏—Ç–∞–µ—Ç—Å—è "–æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º",
// –Ω–æ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º, –≤–æ—à–µ–¥—à–∏–º —á–µ—Ä–µ–∑ API.
const BOT_SYSTEM_USER_ID = 1; // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–π ID —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≤–∞—à–µ–π —Ç–∞–±–ª–∏—Ü–µ User, –µ—Å–ª–∏ –ø—Ä–∏–º–µ–Ω–∏–º–æ

/**
 * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏ –∫–ª–∏–µ–Ω—Ç–∞ –≤ –ë–î.
 * @param whatsappJid WhatsApp JID –∫–ª–∏–µ–Ω—Ç–∞
 * @returns ID –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ –≤–∞—à–µ–π –ë–î.
 */
// async function ensureClient(whatsappJid: string): Promise<number> {
//     let client = await prisma.client.findUnique({
//         where: { whatsappJid: whatsappJid },
//     });

//     if (!client) {
//         client = await prisma.client.create({
//             data: { 
//                 whatsappJid: whatsappJid,
//                 name: whatsappJid.split('@')[0] 
//             },
//         });
//         logger.info(`‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç —Å JID: ${whatsappJid}, ID: ${client.id}`);
//     }
//     return client.id;
// }


/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É JID –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è.
 * @param req Request - –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å { jid: string, message: string, phoneNumber: string }
 * @param res Response
 */
export const sendTextMessage = async (req: Request, res: Response) => {
    const sentByUserId = res.locals.userId; 
  const { jid, message, phoneNumber } = req.body; 

  if (!jid || !message || !phoneNumber || sentByUserId === undefined) {
    return res.status(400).json({ error: '–¢—Ä–µ–±—É—é—Ç—Å—è –ø–æ–ª—è jid, message, phoneNumber, –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω.' });
  }

  try {
    const sock = getBaileysSock(); 

    if (!sock) {
      return res.status(404).json({ error: `–ê–∫–∫–∞—É–Ω—Ç —Å –Ω–æ–º–µ—Ä–æ–º ${phoneNumber} –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.` });
    }

    const content: AnyMessageContent = { text: message };

    logger.info(`–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${sentByUserId} (—á–µ—Ä–µ–∑ –∞–∫–∫–∞—É–Ω—Ç ${phoneNumber}) –Ω–∞ ${jid}: "${message}"`);

    const result = await sock.sendMessage(jid, content);

    // --- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ë–î ---
    // const chatId = await ensureChat(jid, phoneNumber); 

    await prisma.message.create({
      data: {
        receivingPhoneJid: phoneNumber,     // –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–∞–∫–∫–∞—É–Ω—Ç, —Å –∫–æ—Ç–æ—Ä–æ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ)
        remoteJid: jid,                     // JID –ø–æ–ª—É—á–∞—Ç–µ–ª—è
        senderId: sentByUserId,             // <-- –ó–î–ï–°–¨ –ê–ô–î–ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø (–æ–ø–µ—Ä–∞—Ç–æ—Ä–∞)
        content: message,
        type: 'text',
      },
    });
    logger.info(`üíæ –ò—Å—Ö–æ–¥—è—â–µ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (ID –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞: ${sentByUserId}) —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î.`);

    res.status(200).json({
      message: '–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.',
      result: result,
      sentFrom: phoneNumber,
    });
  } catch (error: any) {
    logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: ${error.message}`);
    res.status(500).json({
      error: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.',
      details: error.message,
    });
  }
};

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–µ–¥–∏–∞-—Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É JID –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è.
 * @param req Request - –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å { jid: string, type: 'image' | 'video' | 'document' | 'audio', url: string, caption?: string, filename?: string, phoneNumber: string }
 * @param res Response
 */
export const sendMediaMessage = async (req: Request, res: Response) => {
  const sentByUserId = res.locals.userId; 
  const { jid, type, url, caption, filename, phoneNumber } = req.body;

  if (!jid || !type || !url || !phoneNumber || sentByUserId === undefined) {
    return res.status(400).json({ error: '–¢—Ä–µ–±—É—é—Ç—Å—è –ø–æ–ª—è jid, type, url, phoneNumber, –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω.' });
  }

  try {
    const sock = getBaileysSock(); 

    if (!sock) {
      return res.status(404).json({ error: `–ê–∫–∫–∞—É–Ω—Ç —Å –Ω–æ–º–µ—Ä–æ–º ${phoneNumber} –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.` });
    }

    let content: AnyMessageContent;
    let messageType: string;

    switch (type) {
      case 'image':
        content = { image: { url: url }, caption: caption };
        messageType = 'image';
        break;
      case 'video':
        content = { video: { url: url }, caption: caption };
        messageType = 'video';
        break;
      case 'document':
        // Baileys requires mimetype for documents
        // For simplicity, we'll use a generic one if not provided.
        content = { document: { url: url }, fileName: filename || 'document', mimetype: 'application/octet-stream' };
        messageType = 'document';
        break;
      case 'audio':
        content = { audio: { url: url } };
        messageType = 'audio';
        break;
      default:
        return res.status(400).json({ error: '–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –º–µ–¥–∏–∞.' });
    }

    logger.info(`–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ–¥–∏–∞-—Å–æ–æ–±—â–µ–Ω–∏–µ (${type}) –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${sentByUserId} (—á–µ—Ä–µ–∑ –∞–∫–∫–∞—É–Ω—Ç ${phoneNumber}) –Ω–∞ ${jid}.`);

    const result = await sock.sendMessage(jid, content);

    // --- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ö–æ–¥—è—â–µ–≥–æ –º–µ–¥–∏–∞-—Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ë–î ---
    // const chatId = await ensureChat(jid, phoneNumber); 

    await prisma.message.create({
      data: {
        receivingPhoneJid: phoneNumber,
        remoteJid: jid,
        senderId: sentByUserId, // <-- –ó–î–ï–°–¨ –ê–ô–î–ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø (–æ–ø–µ—Ä–∞—Ç–æ—Ä–∞)
        content: caption, 
        type: messageType,
        mediaUrl: url,
        filename: filename,
      },
    });
    logger.info(`üíæ –ò—Å—Ö–æ–¥—è—â–µ–µ –º–µ–¥–∏–∞-—Å–æ–æ–±—â–µ–Ω–∏–µ (ID –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞: ${sentByUserId}) —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î.`);

    res.status(200).json({
      message: `${type} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.`,
      result: result,
      sentFrom: phoneNumber,
    });
  } catch (error: any) {
    logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –º–µ–¥–∏–∞-—Å–æ–æ–±—â–µ–Ω–∏—è: ${error.message}`);
    res.status(500).json({
      error: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ–¥–∏–∞-—Å–æ–æ–±—â–µ–Ω–∏–µ.',
      details: error.message,
    });
  }
};