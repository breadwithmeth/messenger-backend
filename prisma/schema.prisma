// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model BaileysAuthState {
  id             Int      @id @default(autoincrement())
  organizationId Int
  phoneJid       String
  key            String // ключ, например "creds" или "pre-key:xyz"
  value          Bytes?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@unique([organizationId, phoneJid, key])
}

model BaileysAuth {
  organizationId Int
  phoneJid       String
  key            String
  value          String // Bytes в Prisma соответствует Buffer в Node.js
  type           String // <--- НОВОЕ ПОЛЕ: для хранения типа данных (e.g., 'json', 'buffer')

  @@id([organizationId, phoneJid, key]) // Составной первичный ключ
  @@map("baileys_auth") // Имя таблицы в базе данных
}

model Session {
  id             Int    @id @default(autoincrement())
  organizationId Int
  phoneJid       String

  status    String // connected, disconnected
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([organizationId, phoneJid])
}

model Organization {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())

  users   User[]
  Chat    Chat[]
  phones  OrganizationPhone[] // <--- связь с номерами
  Message Message[]
}

model User {
  id             Int          @id @default(autoincrement())
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId Int
  email          String       @unique
  passwordHash   String
  name           String?
  role           String       @default("operator") // or 'admin'
  createdAt      DateTime     @default(now())

  Chat Chat[] @relation("ChatUsers")
}

model Client {
  id        Int      @id @default(autoincrement())
  phoneJid  String   @unique // e.g. 79001112233@s.whatsapp.net
  name      String?
  createdAt DateTime @default(now())

  metadata ClientMetadata[]

  Chat Chat[] @relation("ChatClients")
}

model Message {
  id                  Int               @id @default(autoincrement())
  organizationId      Int
  organization        Organization      @relation(fields: [organizationId], references: [id])
  organizationPhoneId Int
  organizationPhone   OrganizationPhone @relation(fields: [organizationPhoneId], references: [id])
  chatId              Int
  chat                Chat              @relation(fields: [chatId], references: [id])

  whatsappMessageId String    @unique
  receivingPhoneJid String
  remoteJid         String
  senderJid         String
  fromMe              Boolean
  content             String
  type                String    @default("text")
  mediaUrl            String?
  filename            String?
  mimeType            String?
  size                Int?
  timestamp           DateTime
  status              String // received, sent, delivered, read

  // --- НОВЫЕ ПОЛЯ ДЛЯ ОТВЕТОВ ---
  quotedMessageId     String? // ID цитируемого сообщения в WhatsApp
  quotedContent       String? // Текст цитируемого сообщения

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
}
model ClientMetadata {
  id        Int      @id @default(autoincrement())
  client    Client   @relation(fields: [clientId], references: [id])
  clientId  Int
  key       String
  value     String
  createdAt DateTime @default(now())
}

// model MessageEvent {
//   id        Int      @id @default(autoincrement())
//   message   Message  @relation(fields: [messageId], references: [id])
//   messageId Int
//   status    String // sent / delivered / read
//   eventAt   DateTime @default(now())
// }

model Chat {
  id                  Int          @id @default(autoincrement())
  organization        Organization @relation(fields: [organizationId], references: [id])
  organizationId      Int
  name                String?
  createdAt           DateTime     @default(now())
  receivingPhoneJid   String
  remoteJid           String
  organizationPhoneId Int          @default(1) // <-- Добавлено @default(1)
                                               // !!! ВАЖНО: Убедитесь, что в OrganizationPhone есть запись с id=1
                                               // или укажите другой существующий ID.
  organizationPhone   OrganizationPhone @relation(fields: [organizationPhoneId], references: [id])
  isGroup             Boolean      @default(false)
  lastMessageAt       DateTime?

  clients             Client[]     @relation("ChatClients")
  users               User[]       @relation("ChatUsers")
  messages            Message[]

  @@unique([organizationId, receivingPhoneJid, remoteJid])
}


model OrganizationPhone {
  id              Int            @id @default(autoincrement())
  organization    Organization   @relation(fields: [organizationId], references: [id])
  organizationId  Int
  phoneJid        String         @unique // например, 79001112233@s.whatsapp.net
  displayName     String?        // для подписи или отображения
  status          String         @default("pending") // pending, connected, logged_out, etc.
  lastConnectedAt DateTime?
  createdAt       DateTime       @default(now())
  qrCode          String? 
  updatedAt       DateTime       @updatedAt @default(now()) // <-- Добавлено @default(now())
                                                           // @updatedAt уже автоматически обновляет,
                                                           // но @default(now()) помогает при миграции для существующих строк.

  chats           Chat[] // Связь с моделью Chat
  messages        Message[] // Связь с моделью Message
}

