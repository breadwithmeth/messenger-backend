// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
model BaileysAuthState {
  id             Int      @id @default(autoincrement())
  organizationId Int
  phoneJid       String
  key            String   // ключ, например "creds" или "pre-key:xyz"
  value          Bytes?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@unique([organizationId, phoneJid, key])
}
model BaileysAuth {
  organizationId Int
  phoneJid       String
  key            String
  value          String // Bytes в Prisma соответствует Buffer в Node.js
  type           String // <--- НОВОЕ ПОЛЕ: для хранения типа данных (e.g., 'json', 'buffer')

  @@id([organizationId, phoneJid, key]) // Составной первичный ключ
  @@map("baileys_auth") // Имя таблицы в базе данных
}
model Session {
  id             Int      @id @default(autoincrement())
  organizationId Int
  phoneJid       String

  status         String   // connected, disconnected
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@unique([organizationId, phoneJid])
}


model Organization {
  id        Int       @id @default(autoincrement())
  name      String
  createdAt DateTime  @default(now())

  users     User[]

}

model User {
  id             Int       @id @default(autoincrement())
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId Int
  email          String     @unique
  passwordHash   String
  name           String?
  role           String     @default("operator") // or 'admin'
  createdAt      DateTime   @default(now())

}

model Client {
  id        Int       @id @default(autoincrement())
  phoneJid  String    @unique // e.g. 79001112233@s.whatsapp.net
  name      String?
  createdAt DateTime  @default(now())

  metadata  ClientMetadata[]
}



model Message {
  id          Int      @id @default(autoincrement())
  receivingPhoneJid String   // Поле для быстрой фильтрации по вашему аккаунту
  remoteJid   String   // Идентификатор WhatsApp JID собеседника
  senderId    Int      // manually resolve: either from clients or users

  content     String?  // text of the message
  type        String   @default("text") // text, image, file, audio, etc.
  mediaUrl    String?  // URL to media (if any)
  filename    String?  // Optional filename for attachments
  mimeType    String?  // Optional MIME type (e.g., image/jpeg)
  size        Int?     // Optional size in bytes

  createdAt   DateTime @default(now())

  events      MessageEvent[]
}




model ClientMetadata {
  id        Int      @id @default(autoincrement())
  client    Client   @relation(fields: [clientId], references: [id])
  clientId  Int
  key       String
  value     String
  createdAt DateTime @default(now())
}



model MessageEvent {
  id         Int     @id @default(autoincrement())
  message    Message @relation(fields: [messageId], references: [id])
  messageId  Int
  status     String  // sent / delivered / read
  eventAt    DateTime @default(now())
}
